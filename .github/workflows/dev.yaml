name: Dev

on:
  push:
    branches:
      - main

jobs:
  check-external-api:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Check API data
        run: |
          import requests
          import sys

          API_URL = "https://api.first.org/data/v1/countries"

          response = requests.get(API_URL)

          if response.status_code != 200:
              print(f"API request failed with status code: {response.status_code}")
              sys.exit(1)

          data = response.json()

          if 'data' not in data or not data['data']:
              print("API response does not contain expected data")
              sys.exit(1)

          print("API check successful")
        shell: python

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.name,
              title: 'API Check Failed',
              body: 'The daily API check has failed. Please investigate.'
            })

  check-dependencies:
    runs-on: ubuntu-latest
    needs : [check-external-api]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11.4

  dependency-scan:
    runs-on: ubuntu-latest
    needs: [check-dependencies]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install safety
        run: |
          python -m pip install safety

      - name: Run dependency vulnerability scan
        run: |
          safety check --full-report

  check-requirements:
    runs-on: ubuntu-latest
    needs: [check-dependencies]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11.4

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check requirements
        run: |
          pip check

      - name: Compatibility check
        run: |
          python manage.py check

      - name: Deployment check
        run: |
          python manage.py check --deploy

  quality-check:
    runs-on: ubuntu-latest
    needs: [check-requirements]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11.4

      - name: Install dependencies
        run: |
          python -m pip install flake8 pylint isort black autoflake

      - name: Run black formatting
        run: |
          black . --exclude env/

      - name: Run isort
        run: |
          isort . --skip env/

      - name: Run autoflake8
        run: |
          autoflake --remove-all-unused-imports --recursive --exclude=env .

      - name : Run lint score
        run: |
          pylint --ignore=env,migrations,tests .

      

  security-check:
    runs-on: ubuntu-latest
    needs: [quality-check]
    steps:
      - uses: actions/checkout@main
      
      - name : Bandit Security check
        run: |
          pip install bandit && bandit utils/*.py accounts/*.py gamification/*.py contents/*.py analytics/*.py interaction/*.p
      
      - name: Safety CLI vulnerabilities check
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
          args: --detailed-output 
